// @ts-ignore
import Provider from 'oidc-provider';
// @ts-ignore
import MemoryAdapter from 'oidc-provider/lib/adapters/memory_adapter';

const accounts = new Map();
accounts.set('user', { sub: 'user', email: 'user@example.com', name: 'Demo User' });

const configuration = {
  clients: [
    {
      client_id: 'client_id',
      client_secret: 'client_secret',
      redirect_uris: ['http://localhost:3001/callback'],
      grant_types: ['authorization_code'],
      response_types: ['code'],
    },
    {
      client_id: 'service_client',
      client_secret: 'service_secret',
      grant_types: ['client_credentials'],
      response_types: [],
    },
    {
      client_id: 'resource_server',
      client_secret: 'resource_secret',
      grant_types: [],
      response_types: [],
      token_endpoint_auth_method: 'client_secret_basic',
      introspection_endpoint_auth_method: 'client_secret_basic',
    },
  ],
  // For demo purposes, using a simple in-memory adapter
  // In production, use a proper adapter
  adapter: MemoryAdapter,
  cookies: {
    keys: ['some-secret-key-for-cookies'],
  },
  // JWKS will be generated by the provider
  // Other configurations
  scopes: ['openid', 'profile', 'email', 'api:read'],
  claims: {
    openid: ['sub'],
    profile: ['name'],
    email: ['email'],
  },
  findAccount: async (ctx: any, sub: string, token: any) => {
    console.log('findAccount called with sub:', sub);
    const account = accounts.get(sub) || accounts.get('user');
    return {
      accountId: account?.sub || 'user',
      async claims(use: any, scope: any, claims: any, rejected: any) {
        console.log('claims called with use:', use, 'scope:', scope);
        return { sub: account?.sub || 'user', email: account?.email || 'user@example.com', name: account?.name || 'Demo User' };
      }
    };
  },
  features: {
    devInteractions: { enabled: true }, // enable dev interactions for demo
    clientCredentials: { enabled: true },
    introspection: {
      enabled: true,
      allowedPolicy: async (_ctx: any, client: any, token: any) => {
        if (client?.clientId === 'resource_server') {
          return true;
        }
        return client?.clientId === token?.clientId;
      },
    },
  },
};

const provider = new Provider('http://localhost:3000', configuration);

provider.listen(3000, () => {
  console.log('OIDC Provider is listening on http://localhost:3000');
});
